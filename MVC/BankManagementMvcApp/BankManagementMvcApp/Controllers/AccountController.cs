using BankManagementMvcApp.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering; // For SelectListItem
using System;
using System.Threading.Tasks;
using static BankManagementMvcApp.Models.Services.IBankAccount;

public class AccountController : Controller
{
    private readonly IBankAccountService _bankAccountService;

    public AccountController(IBankAccountService bankAccountService)
    {
        _bankAccountService = bankAccountService;
    }

    // GET: Account/Create
    public IActionResult Create()
    {
        ViewBag.AccountTypes = new SelectList(Enum.GetNames(typeof(AccountType)));
        return View();
    }

    // POST: Account/Create
    [HttpPost]
    [ValidateAntiForgeryToken] // Prevents Cross-Site Request Forgery attacks
    public async Task<IActionResult> Create(Account account)
    {
        // Clear AccountNumber validation as it's generated by the system
        ModelState.Remove(nameof(account.AccountNumber));

        if (ModelState.IsValid)
        {
            // Convert AccountType enum to string for the service layer
            string accountTypeString = account.Type.ToString();
            int? newAccountNumber = await _bankAccountService.CreateAccountAsync(account.AccountHolderName, account.BankBalance, accountTypeString);

            if (newAccountNumber.HasValue)
            {
                TempData["SuccessMessage"] = $"Account created successfully! Your Account Number is: {newAccountNumber.Value}";
                return RedirectToAction(nameof(Details), new { id = newAccountNumber.Value }); // Redirect to details page
            }
            else
            {
                TempData["ErrorMessage"] = "Failed to create account. Please try again.";
            }
        }
        ViewBag.AccountTypes = new SelectList(Enum.GetNames(typeof(AccountType)));
        return View(account); // Return view with errors
    }

    // GET: Account/Deposit
    public IActionResult Deposit()
    {
        return View();
    }

    // POST: Account/Deposit
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Deposit(DepositWithdrawViewModel model)
    {
        if (ModelState.IsValid)
        {
            bool success = await _bankAccountService.DepositAsync(model.AccountNumber, model.Amount);
            if (success)
            {
                TempData["SuccessMessage"] = $"Successfully deposited {model.Amount:C} into account {model.AccountNumber}.";
                return RedirectToAction(nameof(Details), new { id = model.AccountNumber });
            }
            else
            {
                TempData["ErrorMessage"] = "Deposit failed. Account not found or an error occurred.";
            }
        }
        return View(model);
    }

    // GET: Account/Withdraw
    public IActionResult Withdraw()
    {
        return View();
    }

    // POST: Account/Withdraw
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Withdraw(DepositWithdrawViewModel model)
    {
        if (ModelState.IsValid)
        {
            bool success = await _bankAccountService.WithdrawAsync(model.AccountNumber, model.Amount);
            if (success)
            {
                TempData["SuccessMessage"] = $"Successfully withdrew {model.Amount:C} from account {model.AccountNumber}.";
                return RedirectToAction(nameof(Details), new { id = model.AccountNumber });
            }
            else
            {
                // More specific error messages based on service return (e.g., insufficient funds)
                TempData["ErrorMessage"] = "Withdrawal failed. Account not found or insufficient funds.";
            }
        }
        return View(model);
    }

    // GET: Account/Details (Form to enter account number)
    public IActionResult Details()
    {
        return View();
    }

    // POST: Account/Details (Display account details)
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Details(int accountNumber) // Using a simple int parameter for form submission
    {
        if (accountNumber <= 0)
        {
            ModelState.AddModelError("accountNumber", "Please enter a valid account number.");
            return View();
        }

        var account = await _bankAccountService.GetAccountDetailsAsync(accountNumber);
        if (account != null)
        {
            return View("AccountDetailsDisplay", account); // Render a specific view for display
        }
        else
        {
            TempData["ErrorMessage"] = $"Account with number {accountNumber} not found.";
            return View(); // Return to the input form
        }
    }

    // GET: Account/Details/{id} (Direct link to details, e.g., after creation)
    public async Task<IActionResult> Details(string id) // Using string id to handle optional route parameter
    {
        if (int.TryParse(id, out int accountNumber))
        {
            var account = await _bankAccountService.GetAccountDetailsAsync(accountNumber);
            if (account != null)
            {
                return View("AccountDetailsDisplay", account);
            }
        }
        TempData["ErrorMessage"] = "Account not found or invalid account number provided.";
        return RedirectToAction(nameof(Details)); // Redirect to the input form
    }
}
